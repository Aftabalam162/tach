import os
from datetime import datetime
from typing import Optional


from tach.constants import PACKAGE_FILE_NAME, CONFIG_FILE_NAME
from tach.errors import TachError
from tach.filesystem.project import find_project_config_root


def validate_package_config(root: str = ".") -> Optional[str]:
    file_path = os.path.join(root, f"{PACKAGE_FILE_NAME}.yml")
    if os.path.exists(file_path):
        return file_path
    file_path = os.path.join(root, f"{PACKAGE_FILE_NAME}.yaml")
    if os.path.exists(file_path):
        return file_path
    return


def validate_path_for_add(path: str) -> None:
    if not os.path.exists(path):
        raise TachError(f"{path} does not exist.")
    if os.path.isdir(path):
        # 'path' points to a directory
        # so we validate that it is a Python package without an existing package config
        if os.path.exists(
            os.path.join(path, f"{PACKAGE_FILE_NAME}.yml")
        ) or os.path.exists(os.path.join(path, f"{PACKAGE_FILE_NAME}.yaml")):
            raise TachError(f"{path} already contains a {PACKAGE_FILE_NAME}.yml")
        if not os.path.exists(os.path.join(path, "__init__.py")):
            raise TachError(
                f"{path} is not a valid Python package (no __init__.py found)."
            )
    else:
        # 'path' points to a file
        # so we validate that it is a Python file we can 'pivot' to a package
        if not path.endswith(".py"):
            raise TachError(f"{path} is not a Python file.")
        if os.path.exists(path.removesuffix(".py")):
            raise TachError("{path} already has a directory of the same name.")
    root = find_project_config_root(path)
    if not root:
        raise TachError(
            f"{CONFIG_FILE_NAME} does not exist in any parent directories"
        )


def build_package(path: str, tags: Optional[set[str]]) -> Optional[str]:
    dirname = path.removesuffix(".py")
    new_tag = os.path.basename(dirname)
    if not tags:
        tags_to_write = [new_tag]
    else:
        tags_to_write = tags
    if os.path.isfile(path):
        # Create the package directory
        os.mkdir(dirname)
        # Write the __init__
        with open(f"{dirname}/__init__.py", "w") as new_init:
            new_init.write(f"""# Generated by tach  on {datetime.now().strftime(
                '%Y-%m-%d %H:%M:%S')}
from .main import *
            """)
        # Move and rename the file
        os.rename(path, f"{dirname}/main.py")
    # Write the package.yml
    with open(f"{dirname}/{PACKAGE_FILE_NAME}.yml", "w") as f:
        comma_separated_tags = ",".join(map(lambda tag: f'"{tag}"', tags_to_write))
        f.write(f"tags: [{comma_separated_tags}]\n")
    if not tags:
        return new_tag
