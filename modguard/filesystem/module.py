import os
from datetime import datetime
from pathlib import Path
from typing import Optional


from modguard.constants import MODULE_FILE_NAME, CONFIG_FILE_NAME
from modguard.errors import ModguardError
from modguard.filesystem import get_project_config_path


def validate_module_config(root: str = ".") -> Optional[str]:
    file_path = os.path.join(root, f"{MODULE_FILE_NAME}.yml")
    if os.path.exists(file_path):
        return file_path
    file_path = os.path.join(root, f"{MODULE_FILE_NAME}.yaml")
    if os.path.exists(file_path):
        return file_path
    return


def validate_path_for_add(path: str) -> None:
    if not os.path.exists(path):
        raise ModguardError(f"{path} does not exist.")
    if os.path.isdir(path):
        if os.path.exists(
            os.path.join(path, f"{MODULE_FILE_NAME}.yml")
        ) or os.path.exists(os.path.join(path, f"{MODULE_FILE_NAME}.yaml")):
            raise ModguardError(f"{path} already contains a {MODULE_FILE_NAME}.yml")
        if not os.path.exists(os.path.join(path, "__init__.py")):
            raise ModguardError(
                f"{path} is not a valid Python package (no __init__.py found)."
            )
        # check for project config
        if get_project_config_path(path):
            return
    # this is a file
    else:
        if not path.endswith(".py"):
            raise ModguardError(f"{path} is not a Python file.")
        if os.path.exists(path.removesuffix(".py")):
            raise ModguardError("{path} already has a directory of the same name.")
    path_obj = Path(path)
    # Iterate upwards, looking for project config
    for parent in path_obj.parents:
        if get_project_config_path(str(parent)):
            return
    raise ModguardError(f"{CONFIG_FILE_NAME} does not exist in any parent directories")


def build_module(path: str, tags: Optional[list[str]]) -> None:
    dirname = path.removesuffix(".py")
    if os.path.isfile(path):
        # Create the package directory
        os.mkdir(dirname)
        # Write the __init__
        with open(f"{dirname}/__init__.py") as new_init:
            new_init.write(f"""# Generated by modguard  on {datetime.now().strftime(
                '%Y-%m-%d %H:%M:%S')}
from .main import *
            """)
        # Move and rename the file
        os.rename(path, f"{dirname}/main.py")
    # Write the module.yml
    with open(f"{path}/{MODULE_FILE_NAME}.yml", "w") as f:
        f.write(f"tags: [{','.join(tags)}]\n")
